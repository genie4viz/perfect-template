import React, {useRef, useState} from 'react';
import gql from "graphql-tag";
import { Mutation } from "react-apollo";
import { Link } from 'react-router-dom';
import { makeStyles } from '@material-ui/core/styles';
import Container from '@material-ui/core/Container';
import Paper from '@material-ui/core/Paper';
import AppBar from '@material-ui/core/AppBar';
import TextField from '@material-ui/core/TextField';
import Fab from '@material-ui/core/Fab';
import KeyboardReturnIcon from '@material-ui/icons/KeyboardReturn';
import Button from '@material-ui/core/Button';
import Utils from '@date-io/date-fns'
import {
  MuiPickersUtilsProvider,
  KeyboardTimePicker,
  KeyboardDatePicker,
} from '@material-ui/pickers';

const ADD_BOOK = gql`
    mutation AddBook(
        $isbn: String!,
        $title: String!,
        $author: String!,
        $description: String!,
        $publisher: String!,
        $published_year: Int!) {
        addBook(
            isbn: $isbn,
            title: $title,
            author: $author,
            description: $description,
            publisher: $publisher,
            published_year: $published_year) {
            _id
        }
    }
`;

const useStyles = makeStyles(theme => ({
    form: {
        margin: theme.spacing(2)        
    },
    formElement: {
        width: '100%',
        margin: theme.spacing(1)
    },
    container: {
        padding: theme.spacing(2),
        textAlign: 'center',
        color: theme.palette.text.secondary,
    },
    paper: {
        padding: theme.spacing(2),        
        color: theme.palette.text.secondary,
    },
    iconButton: {
        margin: theme.spacing(2)
    }
}));

export default function AddBook(props){
    
    let isbn, title, author, description, published_year, publisher;
    const isbnRef = useRef();
    const titleRef = useRef();
    const authorRef= useRef();
    const descriptionRef = useRef();
    const pubyearRef = useRef();
    const publisherRef = useRef();

    const classes = useStyles();
    const [selectedDate, setSelectedDate] = useState(new Date('2014-08-18T21:11:54'));

    const submitForm = e => {
        e.preventDefault();
        console.log('submit')
        // isbnRef.current.value = '';
        console.log(isbnRef.current, 'ppp')
        // titleRef.current.value = '';
        // authorRef.current.value = '';
        // descriptionRef.current.value = '';
        // pubyearRef.current.value = '';
        // publisherRef.current.value = '';
    }   

    const handleDateChange = date => {
        setSelectedDate(date);
    };

    return (
        <Mutation mutation={ADD_BOOK} onCompleted={() => props.history.push('/')}>
            {(addBook, { loading, error }) => (
                <Container maxWidth="lg" className={classes.container}>
                    <AppBar position="static">
                    <h3>ADD BOOK</h3>
                    <Link to="/">
                        <Fab color="secondary" aria-label="return" className={classes.iconButton}>
                            <KeyboardReturnIcon />
                        </Fab>
                    </Link>
                    </AppBar>
                    <Paper className={classes.paper}>
                        <form 
                            onSubmit={e => submitForm(e)}
                            className={classes.form}
                            noValidate 
                            autoComplete="off"
                        >
                            <div>
                                <TextField required ref={isbnRef} label="ISBN" className={classes.formElement}/>
                            </div>
                            <div>
                                <TextField required ref={titleRef} label="Title" className={classes.formElement} />
                            </div>
                            <div>
                                <TextField required ref={authorRef} label="Author" className={classes.formElement}/>
                            </div>
                            <div>
                                <TextField ref={descriptionRef} label="Description" className={classes.formElement} />
                            </div>
                            <div>
                                <TextField ref={publisherRef} label="Publisher" className={classes.formElement} />
                            </div>
                            <div>
                                <MuiPickersUtilsProvider utils={Utils}>
                                    <KeyboardDatePicker
                                        disableToolbar
                                        variant="inline"
                                        format="MM/dd/yyyy"
                                        margin="normal"                                        
                                        label="Publish Year"
                                        value={selectedDate}
                                        onChange={handleDateChange}
                                        KeyboardButtonProps={{
                                            'aria-label': 'change date',
                                        }}
                                        className={classes.formElement}
                                    />
                                </MuiPickersUtilsProvider>                                
                            </div>
                            <div>
                                <Button variant="contained" color="secondary" type="submit">
                                    Submit
                                </Button>
                            </div>
                        </form>
                    </Paper>
                </Container>
                // <div className="container">
                //     <div className="panel panel-default">
                //         <div className="panel-heading">
                //             <h3 className="panel-title">
                //                 ADD BOOK
                //             </h3>
                //         </div>
                //         <div className="panel-body">
                //             <h4><Link to="/" className="btn btn-primary">Book List</Link></h4>
                //             <form onSubmit={e => {
                //                 e.preventDefault();
                //                 addBook({ variables: { isbn: isbn.value, title: title.value, author: author.value, description: description.value, publisher: publisher.value, published_year: parseInt(published_year.value) } });
                //                 isbn.value = "";
                //                 title.value = "";
                //                 author.value = "";
                //                 description.value = "";
                //                 publisher.value = null;
                //                 published_year.value = "";
                //             }}>
                //                 <div className="form-group">
                //                     <label htmlFor="isbn">ISBN:</label>
                //                     <input type="text" className="form-control" name="isbn" ref={node => {
                //                         isbn = node;
                //                     }} placeholder="ISBN" />
                //                 </div>
                //                 <div className="form-group">
                //                     <label htmlFor="title">Title:</label>
                //                     <input type="text" className="form-control" name="title" ref={node => {
                //                         title = node;
                //                     }} placeholder="Title" />
                //                 </div>
                //                 <div className="form-group">
                //                     <label htmlFor="author">Author:</label>
                //                     <input type="text" className="form-control" name="author" ref={node => {
                //                         author = node;
                //                     }} placeholder="Author" />
                //                 </div>
                //                 <div className="form-group">
                //                     <label htmlFor="description">Description:</label>
                //                     <textarea className="form-control" name="description" ref={node => {
                //                         description = node;
                //                     }} placeholder="Description" cols="80" rows="3" />
                //                 </div>
                //                 <div className="form-group">
                //                     <label htmlFor="author">Publisher:</label>
                //                     <input type="text" className="form-control" name="publisher" ref={node => {
                //                         publisher = node;
                //                     }} placeholder="Publisher" />
                //                 </div>
                //                 <div className="form-group">
                //                     <label htmlFor="author">Published Year:</label>
                //                     <input type="number" className="form-control" name="published_year" ref={node => {
                //                         published_year = node;
                //                     }} placeholder="Published Year" />
                //                 </div>
                //                 <button type="submit" className="btn btn-success">Submit</button>
                //             </form>
                //             {loading && <p>Loading...</p>}
                //             {error && <p>Error :( Please try again</p>}
                //         </div>
                //     </div>
                // </div>
            )}
        </Mutation>
    );
    
  }